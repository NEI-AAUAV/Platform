#!/usr/bin/env bash
set -e

#
# ARG_POSITIONAL_SINGLE([container],[The name of the docker container with the database],[platform-db_pg-1])
# ARG_OPTIONAL_SINGLE([input],[i],[Read the backup from the provided path])
# ARG_OPTIONAL_BOOLEAN([decompress],[],[Decompress the backup before applying it])
# ARG_OPTIONAL_BOOLEAN([decrypt],[],[Decrypt the backup before applying it])
# ARG_DEFAULTS_POS()
# ARG_HELP([Restores a database backup for a PostgreSQL database])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_container="platform-db_pg-1"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_input=
_arg_decompress="off"
_arg_decrypt="off"


print_help()
{
	printf '%s\n' "Restores a database backup for a PostgreSQL database"
	printf 'Usage: %s [-i|--input <arg>] [--(no-)decompress] [--(no-)decrypt] [-h|--help] [<container>]\n' "$0"
	printf '\t%s\n' "<container>: The name of the docker container with the database (default: 'platform-db_pg-1')"
	printf '\t%s\n' "-i, --input: Read the backup from the provided path (no default)"
	printf '\t%s\n' "--decompress, --no-decompress: Decompress the backup before applying it (off by default)"
	printf '\t%s\n' "--decrypt, --no-decrypt: Decrypt the backup before applying it (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-i|--input)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_input="$2"
				shift
				;;
			--input=*)
				_arg_input="${_key##--input=}"
				;;
			-i*)
				_arg_input="${_key##-i}"
				;;
			--no-decompress|--decompress)
				_arg_decompress="on"
				test "${1:0:5}" = "--no-" && _arg_decompress="off"
				;;
			--no-decrypt|--decrypt)
				_arg_decrypt="on"
				test "${1:0:5}" = "--no-" && _arg_decrypt="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_container "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



# vvv  PLACE YOUR CODE HERE  vvv

POSTGRES_USER="${POSTGRES_USER:-postgres}"
POSTGRES_DB="${POSTGRES_USER:-postgres}"
SCHEMA_NAME="${SCHEMA_NAME:-nei}"


drop() {
	docker exec -i "$_arg_container" psql -U $POSTGRES_USER -d $POSTGRES_DB \
	-c "DROP SCHEMA IF EXISTS $SCHEMA_NAME CASCADE;"
}

# Command to restore the backup, expects the backup in stdin
# To execute the backup `psql` is piped the backup inside the container
restore() {
    docker exec -i "$_arg_container" psql -U $POSTGRES_USER -d $POSTGRES_DB
}

# Command to decrypt stdin and write the result to stdout
decrypt() {
    # Simply calls gpg to decrypt, the private key must be present in the keyring
    gpg --decrypt
}

# Command to confirm an action with the user
confirm() {
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

confirm "This will erase the database. Proceed? [y/N]" || (echo "Aborting" && exit 125)

drop

# Restores the backup to a docker container, the backup may optionally be passed
# trough a pipeline to allow multiple transformations online as requested by the user
# before restoring it.
#
# Each step in the pipeline is defined as:
#   ( [ not condition ] && cat || command )
#
# This sequence works because of short-circuiting, if the condition is true, cat
# will be executed which returns a zero exit code which evaluates to true
# causing the `||` to short-circuit. If the condition is false the `&&`
# short-circuits and `cat` isn't executed.
#
# The `condition` is negated because otherwise the branches would be inverted and
# this could cause problems in case `command` returns a non-zero exit code,
# because this would execute `cat` afterwards.
# Source: https://unix.stackexchange.com/questions/38310/conditional-pipeline
#
# Decrypt the backup with gpg if the user requested it
( [ "$_arg_decrypt" = "off" ] && cat || decrypt ) < "$_arg_input" |
# Decompress the backup with zstd compression if the user requested it
( [ "$_arg_decompress" = "off" ] && cat || unzstd ) |
# Finally restore the backup
restore

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^


# vi: ft=bash
# ] <-- needed because of Argbash
