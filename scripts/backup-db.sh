#!/usr/bin/env bash
set -e

#
# ARG_POSITIONAL_SINGLE([container],[The name of the docker container with the database],[platform-db_pg-1])
# ARG_OPTIONAL_SINGLE([output],[o],[Save the backup to the provided path],[backup-$(date "+%Y%m%d%H%M%S").sql])
# ARG_OPTIONAL_BOOLEAN([compress],[],[Apply zstd compression to the backup])
# ARG_OPTIONAL_BOOLEAN([encrypt],[],[Encrypt the backup before applying it])
# ARG_DEFAULTS_POS()
# ARG_HELP([Dumps the NEI database to a backup])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='oh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_container="platform-db_pg-1"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output="backup-$(date "+%Y%m%d%H%M%S").sql"
_arg_compress="off"
_arg_encrypt="off"


print_help()
{
	printf '%s\n' "Dumps the NEI database to a backup"
	printf 'Usage: %s [-o|--output <arg>] [--(no-)compress] [--(no-)encrypt] [-h|--help] [<container>]\n' "$0"
	printf '\t%s\n' "<container>: The name of the docker container with the database (default: 'platform-db_pg-1')"
	printf '\t%s\n' "-o, --output: Save the backup to the provided path (default: 'backup-$(date "+%Y%m%d%H%M%S").sql')"
	printf '\t%s\n' "--compress, --no-compress: Apply zstd compression to the backup (off by default)"
	printf '\t%s\n' "--encrypt, --no-encrypt: Encrypt the backup before applying it (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-o|--output)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			--no-compress|--compress)
				_arg_compress="on"
				test "${1:0:5}" = "--no-" && _arg_compress="off"
				;;
			--no-encrypt|--encrypt)
				_arg_encrypt="on"
				test "${1:0:5}" = "--no-" && _arg_encrypt="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_container "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



# vvv  PLACE YOUR CODE HERE  vvv

# Allows specifying a gpg recipient to encrypt the backup to
#
# The recipient's public key must be added to the root's keyring
ENCRYPT_RECIPIENT=""
# The path of the file to store the backup

POSTGRES_USER="${POSTGRES_USER:-postgres}"
POSTGRES_DB="${POSTGRES_USER:-postgres}"
SCHEMA_NAME="${SCHEMA_NAME:-nei}"

# Command to execute the backup, the backup is written to stdout
backup() {
    # To execute the backup `pg_dump` is called from inside the container
    docker exec -i $_arg_container pg_dump -U $POSTGRES_USER -d $POSTGRES_DB -n $SCHEMA_NAME \
    --column-inserts --rows-per-insert=1000
}

# Command to encrypt stdin and write the result to stdout
encrypt() {
    # Calls gpg with a specific recipient (passed by the user), the recipient's
    # publick key must be stored in the keyring beforehand
    gpg --encrypt --recipient "$ENCRYPT_RECIPIENT"
}

# Create the backups directory if it doesn't exist
mkdir -p backups

# Write the name of the file where the backup will be written to
echo backups/"$_arg_output"

# Extract the backup from the docker container and pass it trough a pipeline
# to allow multiple transformations online as requested by the user.
#
# Each step in the pipeline is defined as:
#   ( [ not condition ] && cat || command )
#
# This sequence works because of short-circuiting, if the condition is true, cat
# will be executed which returns a zero exit code which evaluates to true
# causing the `||` to short-circuit. If the condition is false the `&&`
# short-circuits and `cat` isn't executed.
#
# The `condition` is negated because otherwise the branches would be inverted and
# this could cause problems in case `command` returns a non-zero exit code,
# because this would execute `cat` afterwards.
# Source: https://unix.stackexchange.com/questions/38310/conditional-pipeline
backup |
# Compress the backup with zstd compression if the user requested compression
( [ "$_arg_compress" = "off" ] && cat || zstd ) |
# Encrypt the backup with gpg if the user requested encryption
# Pipe the backup to the file specified by the user or a default file
( [ "$_arg_encrypt" = "off" ] && cat || encrypt ) > backups/"$_arg_output"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^


# vi: ft=bash
# ] <-- needed because of Argbash