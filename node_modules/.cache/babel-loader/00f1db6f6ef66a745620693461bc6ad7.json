{"ast":null,"code":"var _jsxFileName = \"/home/dan1erusam4/.ssh/Website/src/Pages/News/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NewsList from \"./NewsList\";\nimport PageNav from \"../../Components/PageNav\";\nimport FilterSelect from \"../../Components/Filters/FilterSelect\";\nimport Typist from 'react-typist';\nimport { Spinner } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst News = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true); // used to change message when no news are available\n\n  const [news, setNews] = useState([]); // list of news articles\n\n  const [newsTypes, setNewsTypes] = useState([]); // list of all news categories\n\n  const [whitelist, setWhitelist] = useState([]); // list of currently active categories\n\n  const [currPage, setCurrPage] = useState(1); // current page\n\n  const [totalPages, setTotalPages] = useState(1); // total number of pages\n\n  /** Get given news page from API */\n\n  const fetchPage = p_num => {\n    //console.log(\"currPage: \" + currPage + \", new_page: \" + p_num);\n    // check if there are no categories selected\n    if (whitelist.length == 0) {\n      setNews([]);\n      return;\n    } // build string for api request\n\n\n    if (window.location.search) var api = \"/news/\" + window.location.search + \"&\";else var api = \"/news/?\";\n\n    if (whitelist != newsTypes) {\n      whitelist.forEach(v => {\n        api = api + \"category[]=\" + v + \"&\";\n      });\n    }\n\n    setIsLoading(true);\n    setNews([]);\n    fetch(process.env.REACT_APP_API + api + \"page=\" + p_num).then(response => response.json()).then(response => {\n      setIsLoading(false);\n\n      if ('data' in response) {\n        setCurrPage(p_num);\n        setTotalPages(response[\"page\"].pagesNumber);\n        setNews(response['data']);\n      }\n    });\n  }; // Get initial news page from API when component renders, and when selected filters change\n\n\n  useEffect(() => {\n    fetchPage(1);\n  }, [whitelist]); // Get categories from API when component renders\n\n  useEffect(() => {\n    fetch(process.env.REACT_APP_API + \"/news/categories/\").then(response => response.json()).then(response => {\n      if ('data' in response) {\n        var cats = [];\n        response['data'].forEach(c => cats.push(c.category));\n        setNewsTypes(cats);\n        setWhitelist(cats);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex flex-column flex-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(Typist, {\n        children: \"Not\\xEDcias\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FilterSelect, {\n      accordion: true,\n      filterList: newsTypes.map(nt => {\n        return {\n          'filter': nt\n        };\n      }),\n      activeFilters: whitelist,\n      setActiveFilters: setWhitelist,\n      className: \"mb-3\",\n      btnClass: \"mr-2\",\n      children: /*#__PURE__*/_jsxDEV(PageNav, {\n        className: \"col-12 col-lg ml-auto p-0\",\n        page: currPage,\n        total: totalPages,\n        handler: fetchPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"grow\",\n      variant: \"primary\",\n      className: \"mx-auto\",\n      title: \"A carregar...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(NewsList, {\n      news: news,\n      loading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(News, \"U8B5KnhaSpwMo9G41Yu6NQEstXQ=\");\n\n_c = News;\nexport default News;\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"sources":["/home/dan1erusam4/.ssh/Website/src/Pages/News/index.js"],"names":["React","useState","useEffect","NewsList","PageNav","FilterSelect","Typist","Spinner","News","isLoading","setIsLoading","news","setNews","newsTypes","setNewsTypes","whitelist","setWhitelist","currPage","setCurrPage","totalPages","setTotalPages","fetchPage","p_num","length","window","location","search","api","forEach","v","fetch","process","env","REACT_APP_API","then","response","json","pagesNumber","cats","c","push","category","map","nt"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NewsList from \"./NewsList\";\nimport PageNav from \"../../Components/PageNav\";\nimport FilterSelect from \"../../Components/Filters/FilterSelect\";\nimport Typist from 'react-typist';\nimport {Spinner} from 'react-bootstrap';\n\nconst News = () => {\n\n    const [isLoading, setIsLoading] = useState(true);       // used to change message when no news are available\n    const [news, setNews] = useState([]);                   // list of news articles\n    const [newsTypes, setNewsTypes] = useState([]);         // list of all news categories\n    const [whitelist, setWhitelist] = useState([]);         // list of currently active categories\n    const [currPage, setCurrPage] = useState(1);            // current page\n    const [totalPages, setTotalPages] = useState(1);        // total number of pages\n\n    /** Get given news page from API */\n    const fetchPage = (p_num) => {\n        //console.log(\"currPage: \" + currPage + \", new_page: \" + p_num);\n\n        // check if there are no categories selected\n        if (whitelist.length == 0) {\n            setNews([]);\n            return;\n        }\n\n        // build string for api request\n        if (window.location.search)\n            var api = \"/news/\" + window.location.search + \"&\";\n        else\n            var api = \"/news/?\";\n            \n        if (whitelist != newsTypes) {\n            whitelist.forEach( v => {\n                api = api + \"category[]=\" + v + \"&\"; \n            });\n        }        \n\n        setIsLoading(true);\n        setNews([]);\n\n        fetch(process.env.REACT_APP_API + api + \"page=\" + p_num)\n            .then(response => response.json())\n            .then((response) => {\n                setIsLoading(false);\n                if('data' in response) {\n                    setCurrPage(p_num);\n                    setTotalPages(response[\"page\"].pagesNumber);\n                    setNews(response['data']);\n                }\n            });\n    };\n\n    // Get initial news page from API when component renders, and when selected filters change\n    useEffect( () => {fetchPage(1)}, [whitelist]);\n\n    // Get categories from API when component renders\n    useEffect(() => {\n        fetch(process.env.REACT_APP_API + \"/news/categories/\")\n            .then(response => response.json())\n            .then((response) => {\n                if('data' in response) {\n                    var cats = [];\n                    response['data'].forEach( c => cats.push(c.category) );\n                    setNewsTypes(cats);\n                    setWhitelist(cats);\n                }\n            });\n    }, []);\n\n    return (\n        <div className=\"d-flex flex-column flex-wrap\">\n            <h2 className=\"text-center\"><Typist>Notícias</Typist></h2>\n\n            <FilterSelect \n                accordion={true}\n                filterList={newsTypes.map(nt => {return {'filter': nt}})}\n                activeFilters={whitelist}\n                setActiveFilters={setWhitelist}\n                className=\"mb-3\"\n                btnClass=\"mr-2\"\n            >\n                <PageNav className=\"col-12 col-lg ml-auto p-0\" page={currPage} total={totalPages} handler={fetchPage}></PageNav>\n            </FilterSelect>\n\n            {\n                isLoading\n                ?\n                <Spinner animation=\"grow\" variant=\"primary\" className=\"mx-auto\" title=\"A carregar...\" />\n                :\n                <NewsList news={news} loading={isLoading}></NewsList>\n            }\n\n        </div>\n    );\n}\n\nexport default News;"]},"metadata":{},"sourceType":"module"}