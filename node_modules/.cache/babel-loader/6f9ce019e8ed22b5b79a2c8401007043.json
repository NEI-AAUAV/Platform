{"ast":null,"code":"var _jsxFileName = \"/home/dan1erusam4/.ssh/Website/src/Components/PageNav/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Pagination, Nav } from \"react-bootstrap\";\nimport \"./index.css\";\n/* A pagination bar, as seen in https://react-bootstrap.github.io/components/pagination/\n** \n** ATTENTION! This component is 1-based index (first index is 1)!\n**\n** Props:\n** - page: current active page\n** - total: total number of pages\n** - handler: function to call with onClick, argument given is new page number\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageNav = ({\n  className,\n  ...props\n}) => {\n  _s();\n\n  // pass correct number to handler function\n  const handlePage = e => {\n    if (e.target.attributes.value == undefined) var val = e.target.parentElement.attributes.value.value;else var val = e.target.attributes.value.value;\n    if (val == \"prev\") props.handler(props.page - 1);else if (val == \"next\") props.handler(props.page / 1 + 1);else props.handler(val);\n  }; // create each numbered page button\n\n\n  const [pages, setPages] = useState([]);\n  useEffect(() => {\n    const pagesArray = [];\n\n    if (props.total < 5) {\n      for (let i = 1; i <= props.total; i++) {\n        pagesArray.push(i);\n      }\n    } else {\n      // 1 2 3 ...  X\n      if (props.page <= 2) {\n        for (let i = 1; i <= 3; i++) {\n          pagesArray.push(i);\n        }\n\n        pagesArray.push(-1);\n        pagesArray.push(props.total); // 1 ...  X-2 X-1 X\n      } else if (props.page >= props.total - 1) {\n        pagesArray.push(1);\n        pagesArray.push(-1);\n\n        for (let i = props.total - 2; i <= props.total; i++) {\n          pagesArray.push(i);\n        } // ... X-1 X X+1 ...\n\n      } else {\n        let currentpage = parseInt(props.page);\n        pagesArray.push(-1);\n        pagesArray.push(currentpage - 1);\n        pagesArray.push(currentpage);\n        pagesArray.push(currentpage + 1);\n        pagesArray.push(-1);\n      }\n    }\n\n    setPages(pagesArray);\n  }, [props.total, props.page]);\n  return /*#__PURE__*/_jsxDEV(Nav, {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(Pagination, {\n      className: \"mx-auto mx-lg-0 ml-lg-auto mr-0\",\n      children: [/*#__PURE__*/_jsxDEV(Pagination.First, {\n        onClick: handlePage,\n        value: 1,\n        disabled: props.page == 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Pagination.Prev, {\n        onClick: handlePage,\n        value: \"prev\",\n        disabled: props.page == 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), // Not sure how to render this yet, so keeping the condition false for now\n      false && /*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), pages.map(page => page >= 1 ? /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: handlePage,\n        active: page == props.page,\n        value: page,\n        children: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this)), // Not sure how to render this yet, so keeping the condition false for now\n      false && /*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Pagination.Next, {\n        onClick: handlePage,\n        value: \"next\",\n        disabled: props.page == props.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Pagination.Last, {\n        onClick: handlePage,\n        value: props.total,\n        disabled: props.page == props.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PageNav, \"OZdSfBS7sFhYlewtmEOlG7gcNNI=\");\n\n_c = PageNav;\nexport default PageNav;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageNav\");","map":{"version":3,"sources":["/home/dan1erusam4/.ssh/Website/src/Components/PageNav/index.js"],"names":["React","useState","useEffect","Pagination","Nav","PageNav","className","props","handlePage","e","target","attributes","value","undefined","val","parentElement","handler","page","pages","setPages","pagesArray","total","i","push","currentpage","parseInt","map"],"mappings":"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","sourcesContent":["import React,  {useState, useEffect} from \"react\";\nimport { Pagination, Nav } from \"react-bootstrap\";\nimport \"./index.css\";\n\n/* A pagination bar, as seen in https://react-bootstrap.github.io/components/pagination/\n** \n** ATTENTION! This component is 1-based index (first index is 1)!\n**\n** Props:\n** - page: current active page\n** - total: total number of pages\n** - handler: function to call with onClick, argument given is new page number\n*/\nconst PageNav = ({className, ...props}) => {\n\n    // pass correct number to handler function\n    const handlePage = (e) => {\n        if (e.target.attributes.value == undefined)\n            var val = e.target.parentElement.attributes.value.value;\n        else\n            var val = e.target.attributes.value.value;\n\n        if (val == \"prev\")\n            props.handler(props.page-1);\n        else if (val == \"next\")\n            props.handler(props.page/1 +1);\n        else\n            props.handler(val);\n    }\n\n    // create each numbered page button\n    const [pages, setPages] = useState([]);\n\n    useEffect(() => {\n        const pagesArray = [];\n        if (props.total<5) {\n            for (let i = 1; i <= props.total; i++) {\n                pagesArray.push(i);\n            }\n        } else {\n            // 1 2 3 ...  X\n            if (props.page<=2) {\n                for (let i=1; i<=3; i++) {\n                    pagesArray.push(i);\n                }\n                pagesArray.push(-1);\n                pagesArray.push(props.total);\n            // 1 ...  X-2 X-1 X\n            } else if (props.page>=props.total-1) {\n                pagesArray.push(1);\n                pagesArray.push(-1);\n                for (let i=props.total-2; i<=props.total; i++) {\n                    pagesArray.push(i);\n                }\n            // ... X-1 X X+1 ...\n            } else {\n                let currentpage = parseInt(props.page);\n                pagesArray.push(-1);\n                pagesArray.push(currentpage-1);\n                pagesArray.push(currentpage);\n                pagesArray.push(currentpage+1);\n                pagesArray.push(-1);\n            }\n        }\n        setPages(pagesArray);\n    }, [props.total, props.page]);\n    \n    return(\n        <Nav className={className}>\n            <Pagination className=\"mx-auto mx-lg-0 ml-lg-auto mr-0\">\n                <Pagination.First onClick={handlePage} value={1} disabled={props.page == 1} />\n                <Pagination.Prev  onClick={handlePage} value=\"prev\" disabled={props.page == 1} />\n\n                {\n                // Not sure how to render this yet, so keeping the condition false for now\n                false &&\n                <Pagination.Ellipsis />\n                }\n                \n                {\n                    pages.map(\n                        page =>\n                        page>=1 \n                        ?\n                        <Pagination.Item onClick={handlePage} active={page == props.page} value={page} key={page}>\n                            {page}\n                        </Pagination.Item>\n                        :\n                        <Pagination.Ellipsis />\n                    )\n                }\n\n                {\n                // Not sure how to render this yet, so keeping the condition false for now\n                false &&\n                <Pagination.Ellipsis />\n                }\n\n                <Pagination.Next onClick={handlePage} value=\"next\" disabled={props.page == props.total}/>\n                <Pagination.Last onClick={handlePage} value={props.total} disabled={props.page == props.total}/>\n            </Pagination>\n        </Nav>\n    );\n};\n\nexport default PageNav;"]},"metadata":{},"sourceType":"module"}