{"ast":null,"code":"var _jsxFileName = \"/home/joao/Documents/Website/src/Components/Filters/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport FilterButton from \"./FilterButton\";\n/**\n * Filter pills\n * \n * Parameters:\n * - filterList                 obj[]   List of available filters\n *                              { 'filter': key:str, 'color': colorCodeDefault:str, 'hover': colorCodeHover:str }\n *                                          filter: Filter name (required)\n *                                          color: Normal color (optional, if missing .primary will be applied)\n * - className                  str     class text for parent element\n * - style                      obj     styles for parent element\n * - activeFilters                      see FilterButton doc \n * - setActiveFilters                   see FilterButton doc\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Filters = ({\n  activeFilters,\n  setActiveFilters,\n  filterList,\n  className,\n  btnClass,\n  allBtnClass,\n  style\n}) => {\n  _s();\n\n  const [toggleText, setToggleText] = useState(\"Nenhum\"); // update toggle button text\n\n  useEffect(() => {\n    if (activeFilters.length == filterList.length) setToggleText(\"Nenhumas\");else setToggleText(\"Todas\");\n  }, [activeFilters]); // unselect all filters if all are selected, otherwise select all of them\n\n  const toggleAll = () => {\n    if (activeFilters.length == filterList.length) setActiveFilters([]);else setActiveFilters(filterList.map(f => f['filter']));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    style: style,\n    children: [filterList.length > 1 && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outline-primary \" + btnClass,\n      className: allBtnClass + \" p-2\",\n      onClick: toggleAll,\n      children: toggleText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), filterList.map(f => /*#__PURE__*/_jsxDEV(FilterButton, {\n      filter: f,\n      setActiveFilters: setActiveFilters,\n      activeFilters: activeFilters,\n      btnClass: btnClass + \" \" + allBtnClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Filters, \"/RU9YGnQkDGwNuMP1dhIrMkLt7M=\");\n\n_c = Filters;\nexport default Filters;\n\nvar _c;\n\n$RefreshReg$(_c, \"Filters\");","map":{"version":3,"sources":["/home/joao/Documents/Website/src/Components/Filters/index.js"],"names":["React","useEffect","useState","Button","FilterButton","Filters","activeFilters","setActiveFilters","filterList","className","btnClass","allBtnClass","style","toggleText","setToggleText","length","toggleAll","map","f"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,gBAAhB;AAAkCC,EAAAA,UAAlC;AAA8CC,EAAAA,SAA9C;AAAyDC,EAAAA,QAAzD;AAAmEC,EAAAA,WAAnE;AAAgFC,EAAAA;AAAhF,CAAD,KAA4F;AAAA;;AAExG,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,QAAD,CAA5C,CAFwG,CAIxG;;AACAD,EAAAA,SAAS,CAAE,MAAM;AACb,QAAIK,aAAa,CAACS,MAAd,IAAwBP,UAAU,CAACO,MAAvC,EACID,aAAa,CAAC,UAAD,CAAb,CADJ,KAGIA,aAAa,CAAC,OAAD,CAAb;AACP,GALQ,EAKN,CAACR,aAAD,CALM,CAAT,CALwG,CAYxG;;AACA,QAAMU,SAAS,GAAG,MAAM;AACpB,QAAIV,aAAa,CAACS,MAAd,IAAwBP,UAAU,CAACO,MAAvC,EACIR,gBAAgB,CAAC,EAAD,CAAhB,CADJ,KAGIA,gBAAgB,CAACC,UAAU,CAACS,GAAX,CAAeC,CAAC,IAAIA,CAAC,CAAC,QAAD,CAArB,CAAD,CAAhB;AACP,GALD;;AAOA,sBACI;AACI,IAAA,SAAS,EAAET,SADf;AAEI,IAAA,KAAK,EAAEG,KAFX;AAAA,eAKQJ,UAAU,CAACO,MAAX,GAAoB,CAApB,iBACA,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,qBAAqBL,QAAtC;AAAgD,MAAA,SAAS,EAAEC,WAAW,GAAG,MAAzE;AAAiF,MAAA,OAAO,EAAEK,SAA1F;AAAA,gBACKH;AADL;AAAA;AAAA;AAAA;AAAA,YANR,EAYQL,UAAU,CAACS,GAAX,CAAgBC,CAAC,iBACb,QAAC,YAAD;AACI,MAAA,MAAM,EAAEA,CADZ;AAEI,MAAA,gBAAgB,EAAEX,gBAFtB;AAGI,MAAA,aAAa,EAAED,aAHnB;AAII,MAAA,QAAQ,EAAEI,QAAQ,GAAG,GAAX,GAAiBC;AAJ/B;AAAA;AAAA;AAAA;AAAA,YADJ,CAZR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CA5CD;;GAAMN,O;;KAAAA,O;AA8CN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport FilterButton from \"./FilterButton\";\n\n/**\n * Filter pills\n * \n * Parameters:\n * - filterList                 obj[]   List of available filters\n *                              { 'filter': key:str, 'color': colorCodeDefault:str, 'hover': colorCodeHover:str }\n *                                          filter: Filter name (required)\n *                                          color: Normal color (optional, if missing .primary will be applied)\n * - className                  str     class text for parent element\n * - style                      obj     styles for parent element\n * - activeFilters                      see FilterButton doc \n * - setActiveFilters                   see FilterButton doc\n */\nconst Filters = ({activeFilters, setActiveFilters, filterList, className, btnClass, allBtnClass, style}) => {\n\n    const [toggleText, setToggleText] = useState(\"Nenhum\");\n\n    // update toggle button text\n    useEffect( () => {\n        if (activeFilters.length == filterList.length)\n            setToggleText(\"Nenhumas\");\n        else\n            setToggleText(\"Todas\");\n    }, [activeFilters]);\n\n    // unselect all filters if all are selected, otherwise select all of them\n    const toggleAll = () => {\n        if (activeFilters.length == filterList.length)\n            setActiveFilters([]);\n        else\n            setActiveFilters(filterList.map(f => f['filter']));\n    };\n\n    return (\n        <div \n            className={className}\n            style={style}\n        >\n            {\n                filterList.length > 1 &&\n                <Button variant={\"outline-primary \" + btnClass} className={allBtnClass + \" p-2\"} onClick={toggleAll}>\n                    {toggleText}\n                </Button>\n            }\n\n            {\n                filterList.map( f => \n                    <FilterButton\n                        filter={f} \n                        setActiveFilters={setActiveFilters}\n                        activeFilters={activeFilters}\n                        btnClass={btnClass + \" \" + allBtnClass}\n                    />\n                )\n            }\n        </div>\n    );\n}\n\nexport default Filters;"]},"metadata":{},"sourceType":"module"}