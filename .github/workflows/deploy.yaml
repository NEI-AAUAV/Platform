name: Deploy

on:
  workflow_dispatch:
    inputs:
      extension:
        description: 'Deploy with extension'
        required: false
        type: choice
        options: 
        - ''
        - gala
        - rally

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PRODUCTION: true
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      EMAIL_SENDER_ADDRESS: ${{ secrets.EMAIL_SENDER_ADDRESS }}
      EMAIL_SMTP_HOST: ${{ secrets.EMAIL_SMTP_HOST }}
      EMAIL_SMTP_PASSWORD: ${{ secrets.EMAIL_SMTP_PASSWORD }}
      EMAIL_SMTP_USER: ${{ secrets.EMAIL_SMTP_USER }}
      IDP_SECRET_KEY: ${{ secrets.IDP_SECRET_KEY }}
      RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
      ENABLED_EXTENSIONS: ${{ github.event.inputs.extension }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Update extension submodules to tracked branches
      run: |
        git submodule update --init --recursive
        # Always try to refresh submodules to their tracked branch (main)
        git submodule update --remote --merge extensions/rally || true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Github Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get compose files
      id: compose-files
      run: |
        if [ "${{ github.event.inputs.extension }}" = "rally" ]; then
          echo "COMPOSE_FILE=compose.prod.yml,extensions/rally/compose.override.prod.yml" >> "$GITHUB_OUTPUT"
        elif [ "${{ github.event.inputs.extension }}" = "gala" ]; then
          echo "COMPOSE_FILE=compose.prod.yml,extensions/gala/compose.override.prod.yml" >> "$GITHUB_OUTPUT"
        else
          echo "COMPOSE_FILE=compose.prod.yml" >> "$GITHUB_OUTPUT"
        fi

    - name: Build and push
      uses: docker/bake-action@v5
      with:
        push: true
        files: ${{ steps.compose-files.outputs.COMPOSE_FILE }}
        set: |
          *.cache-to=type=gha,scope=cached-stage,mode=max
          *.cache-from=type=gha,scope=cached-stage
  
  deploy:
    needs: build
    runs-on: self-hosted
    env:
      PRODUCTION: true
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      EMAIL_SENDER_ADDRESS: ${{ secrets.EMAIL_SENDER_ADDRESS }}
      EMAIL_SMTP_HOST: ${{ secrets.EMAIL_SMTP_HOST }}
      EMAIL_SMTP_PASSWORD: ${{ secrets.EMAIL_SMTP_PASSWORD }}
      EMAIL_SMTP_USER: ${{ secrets.EMAIL_SMTP_USER }}
      IDP_SECRET_KEY: ${{ secrets.IDP_SECRET_KEY }}
      RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
      ENABLED_EXTENSIONS: ${{ github.event.inputs.extension }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Update extension submodules to tracked branches
      run: |
        git submodule update --init --recursive
        # Always try to refresh submodules to their tracked branch (main)
        git submodule update --remote --merge extensions/rally || true

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: neiaauav
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to Github Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate extension nginx configs
      run: |
        # Generate nginx configs for external nginx
        ENABLED_EXTENSIONS="${{ github.event.inputs.extension }}" ./scripts/generate-external-nginx-configs.sh
        
        # Copy generated configs to Infrastructure nginx
        if [ -d "../Infrastructure/nginx/conf.d" ]; then
          cp nginx-configs/locations.*.conf ../Infrastructure/nginx/conf.d/ 2>/dev/null || true
          echo "Extension nginx configs copied to Infrastructure"
        else
          echo "Infrastructure nginx directory not found"
        fi

    - name: Deploy with docker-compose
      run: |
        if [ "${{ github.event.inputs.extension }}" = "rally" ]; then
          docker-compose -f compose.prod.yml -f extensions/rally/compose.override.prod.yml pull
          docker-compose -f compose.prod.yml -f extensions/rally/compose.override.prod.yml up -d --remove-orphans
        elif [ "${{ github.event.inputs.extension }}" = "gala" ]; then
          docker-compose -f compose.prod.yml -f extensions/gala/compose.override.prod.yml pull
          docker-compose -f compose.prod.yml -f extensions/gala/compose.override.prod.yml up -d --remove-orphans
        else
          docker-compose -f compose.prod.yml pull
          docker-compose -f compose.prod.yml up -d --remove-orphans
        fi
        docker container prune -f
        docker image prune -af
        docker builder prune
