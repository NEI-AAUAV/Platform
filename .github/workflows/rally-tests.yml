name: Rally Extension Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'extensions/rally/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'extensions/rally/**'

jobs:
  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: extensions/rally/api-rally/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      working-directory: extensions/rally/api-rally
      run: |
        poetry install --no-interaction --no-root
        
    - name: Run API tests
      working-directory: extensions/rally/api-rally
      run: |
        poetry run pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml
        
    - name: Upload API coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: extensions/rally/api-rally/coverage.xml
        flags: api
        name: rally-api-coverage
        
    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: extensions/rally/api-rally/test-results.xml

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: extensions/rally/web-rally/package-lock.json
        
    - name: Install dependencies
      working-directory: extensions/rally/web-rally
      run: npm ci
      
    - name: Run frontend tests
      working-directory: extensions/rally/web-rally
      run: |
        npm run test -- --run --coverage --reporter=verbose
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: extensions/rally/web-rally/coverage/lcov.info
        flags: frontend
        name: rally-frontend-coverage
        
    - name: Upload frontend coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-coverage
        path: extensions/rally/web-rally/coverage/

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install API dependencies
      working-directory: extensions/rally/api-rally
      run: |
        poetry install --no-interaction --no-root
        
    - name: Run API tests for SonarQube
      working-directory: extensions/rally/api-rally
      run: |
        poetry run pytest app/tests/ --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: extensions/rally/web-rally/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: extensions/rally/web-rally
      run: npm ci
      
    - name: Run frontend tests for SonarQube
      working-directory: extensions/rally/web-rally
      run: |
        npm run test -- --run --coverage --reporter=verbose
        
    - name: Download API test results
      uses: actions/download-artifact@v3
      with:
        name: api-test-results
        path: extensions/rally/api-rally/
        
    - name: Download frontend coverage
      uses: actions/download-artifact@v3
      with:
        name: frontend-coverage
        path: extensions/rally/web-rally/coverage/
        
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectKey: NEI-AAUAV_Platform-rally-extension_d38c2017-39b1-45f8-9d1e-4706610beae9
        projectBaseDir: extensions/rally
        args: >
          -Dsonar.projectKey=NEI-AAUAV_Platform-rally-extension_d38c2017-39b1-45f8-9d1e-4706610beae9
          -Dsonar.projectName=Rally Extension
          -Dsonar.projectVersion=1.0.0
          -Dsonar.sources=api-rally/app,web-rally/src
          -Dsonar.tests=api-rally/app/tests,web-rally/src/test
          -Dsonar.python.coverage.reportPaths=api-rally/coverage.xml
          -Dsonar.python.xunit.reportPath=api-rally/test-results.xml
          -Dsonar.javascript.lcov.reportPaths=web-rally/coverage/lcov.info
          -Dsonar.exclusions=**/components/ui/**,**/components/shared/**,**/components/themes/**,**/client/**,**/node_modules/**,**/dist/**,**/build/**,**/*.config.*,**/vite-env.d.ts,**/__pycache__/**,**/migrations/**,**/alembic/**
          -Dsonar.coverage.exclusions=**/components/ui/**,**/components/shared/**,**/components/themes/**,**/client/**,**/test/**,**/tests/**,**/__pycache__/**,**/migrations/**,**/alembic/**,**/main.py,**/conftest.py
          -Dsonar.inclusions=**/api-rally/app/api/**,**/api-rally/app/crud/**,**/api-rally/app/models/**,**/api-rally/app/schemas/**,**/api-rally/app/utils/**,**/api-rally/app/core/**,**/web-rally/src/utils/**,**/web-rally/src/hooks/**,**/web-rally/src/stores/**,**/web-rally/src/services/**

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rally
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      working-directory: extensions/rally/api-rally
      run: |
        poetry install --no-interaction --no-root
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: extensions/rally/web-rally/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: extensions/rally/web-rally
      run: npm ci
      
    - name: Run integration tests
      working-directory: extensions/rally
      run: |
        ./run-tests.sh
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_rally
