services:
  db_pg:
    image: postgres:15-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: postgres_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./scripts/:/scripts/:ro
      - pg_data:/var/lib/postgresql/data
    labels:
      ofelia.enabled: "true"
      # Set the interval to 5 minutes for testing
      ofelia.job-exec.cleanup_logins.schedule: "@every 5m"
      ofelia.job-exec.cleanup_logins.command: "psql -U postgres -d postgres -f /scripts/cleanup-logins.sql"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

  db_mongo:
    image: mongo:6.0.5-jammy
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: mongo_test
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend
    restart: unless-stopped

  api_nei:
    build:
      context: api-nei
    ports:
      - 8000:8000
      - 587:587
    environment:
      POSTGRES_SERVER: db_pg
      POSTGRES_PASSWORD: postgres
      JWT_SECRET_KEY_PATH: /jwt.key
      JWT_PUBLIC_KEY_PATH: /jwt.key.pub
    volumes:
      - ./api-nei:/api_nei
      - ./extensions:/extensions:ro
      - ./dev-keys/jwt.key:/jwt.key:ro
      - ./dev-keys/jwt.key.pub:/jwt.key.pub:ro
    depends_on:
      db_pg:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  # api_tacaua:
  #   build:
  #     context: api-tacaua
  #   ports:
  #     - 8001:8001
  #   environment:
  #     API_NEI_SERVER: api_nei
  #     POSTGRES_SERVER: db_pg
  #     POSTGRES_PASSWORD: postgres
  #     PUBLIC_KEY: /jwt.key.pub
  #   volumes:
  #     - ./api-tacaua:/api_tacaua
  #     - ./dev-keys/jwt.key.pub:/jwt.key.pub:ro
  #   depends_on:
  #     db_pg:
  #       condition: service_healthy
  #   networks:
  #     - backend
  #   restart: unless-stopped

  api_family:
    build:
      context: api-family
    ports:
      - 8002:8002
    environment:
      MONGO_SERVER: db_mongo
      MONGO_PASSWORD: mongo
      PUBLIC_KEY: /jwt.key.pub
    volumes:
      - ./api-family:/api_family
      - ./dev-keys/jwt.key.pub:/jwt.key.pub:ro
    depends_on:
      db_mongo:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    profiles:
      - disabled

  web_nei:
    build:
      context: web-nei
    ports:
      - 3000:3000
    volumes:
      - nei_modules:/web_nei/node_modules
      - ./web-nei:/web_nei
    networks:
      - frontend
    restart: unless-stopped

  proxy:
    image: nginx:1.20-alpine
    ports:
      - 80:80
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/locations.conf:/etc/nginx/conf.d/locations.conf:ro
      - ./proxy/nei.web.ua.pt/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web_nei
      - api_nei
      # - api_tacaua
      # - api_family
    networks:
      - backend
      - frontend
    restart: unless-stopped

  ofelia:
    image: mcuadros/ofelia:latest
    depends_on:
      - db_pg
    command: daemon --docker
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock:ro
    networks:
      - backend
    restart: unless-stopped

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  pg_data:
    driver: local
  mongo_data:
    driver: local
  nei_modules:
    driver: local
